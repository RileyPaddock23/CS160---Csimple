%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}


%define parse.error verbose
/* Enables verbose error messages */
%token BOOL CHAR INT STR INTPTR CHARPTR IF 
        ELSE WHILE VAR PROC RETURN

%token AND REF EQ IS DIV LEQ GEQ GT LT MINUS NEQ NOT
        OR PLUS TIMES DEREF SEMI COLON COMMA ABS BRACKO 
        BRACKC PARENO PARENC SBRACKO SBRACKC

%token<u_base_int>  BOOL_VAL INT_VAL CHAR_VAL 
%token<u_base_charptr> STRING_VAL ID KNULL

%type<u_program> Program
%type<u_proc_list> Procedures proc_list;
%type<u_decl_list> decl_list parameter_list multi_type;
%type<u_proc> procedure_decleration;
%type<u_stat_list> stat_list;
%type<u_procedure_block> procedure_block;
%type<u_nested_block> code_block;
%type<u_symname_list> id_list;
%type<u_decl> parameter_decl variable_decleration;
%type<u_stat> statement assignment;
%type<u_expr_list> expr_list multi_expr;
%type<u_return_stat> return_stmt;
%type<u_type> non_str_type type string;
%type<u_expr> str_id_expr primary_expression unary_expression
                multiplicative_expression additive_expression
                relational_expression expression ref_expression and_expression;
%type<u_lhs> str_id_lhs assignment_val;

%start Program
%%


Program:
    Procedures {ast = new ProgramImpl($1);}
    ;

Procedures:
    Procedures procedure_decleration {$1->push_back($2); $$ = $1;}
    | {$$ = new std::list<Proc_ptr>();}
    ;

procedure_decleration:
    PROC ID PARENO parameter_list 
    PARENC RETURN type procedure_block {
        $$ = new ProcImpl(new SymName($2),$4,$7,$8);
        }
    ;

parameter_list:
    parameter_decl multi_type {$2->push_front($1); $$ = $2;}
    | {$$ = new std::list<Decl_ptr>();}
    ;

multi_type:
     SEMI parameter_decl multi_type {$3->push_front($2); $$ = $3;}
    | {$$ = new std::list<Decl_ptr>();}
    ;

parameter_decl:
    id_list COLON non_str_type 
    {$$ = new DeclImpl($1,$3);}
    ;

id_list:
    ID COMMA id_list {$3->push_front(new SymName($1)); $$ = $3;}
    | ID {
    	$$ = new std::list<SymName_ptr>();
        $$->push_front(new SymName($1));	}
    ;

non_str_type:
    BOOL {$$ = new TBoolean();}
    | CHAR {$$ = new TCharacter();}
    | INT {$$ = new TInteger();}
    | CHARPTR {$$ = new TCharPtr();}
    | INTPTR {$$ = new TIntPtr();}
    ;

type:
    non_str_type {$$ = $1;}
    | string {$$ = $1;}
    ;

procedure_block:
    BRACKO proc_list decl_list stat_list return_stmt BRACKC
    {$$ = new Procedure_blockImpl($2,$3,$4,$5);}
    ;

proc_list:
    procedure_decleration proc_list {$2->push_front($1); $$=$2;}
    | {
        $$ = new std::list<Proc_ptr>();
    }
    ;

return_stmt:
    RETURN expression SEMI {$$ = new Return($2);}
    ;

variable_decleration:
    VAR id_list COLON type SEMI {$$ = new DeclImpl($2,$4);}

string:
    STR SBRACKO INT_VAL SBRACKC {$$ = new TString(new Primitive($3));}

str_id_lhs:
    ID SBRACKO expression SBRACKC {
        $$ = new ArrayElement(new SymName($1),$3);} 

str_id_expr:
    ID SBRACKO expression SBRACKC {
        $$ = new ArrayAccess(new SymName($1),$3);}

statement:
    assignment {$$ = $1;}
    | assignment_val IS ID PARENO expr_list PARENC SEMI /*function call*/
    {$$ = new Call($1,new SymName($3),$5);}
    | IF PARENO expression PARENC BRACKO code_block BRACKC    /*if*/
    {$$ = new IfNoElse($3,$6);}
    | IF PARENO expression PARENC BRACKO code_block BRACKC ELSE BRACKO code_block BRACKC /*if else*/
    {$$ = new IfWithElse($3,$6,$10);}
    | WHILE PARENO expression PARENC BRACKO code_block BRACKC /*while*/ 
    {$$ = new WhileLoop($3,$6);}
    | BRACKO code_block BRACKC {$$ = new CodeBlock($2);}
    ;

assignment:
    assignment_val IS expression SEMI 
    {$$ = new Assignment($1,$3);}
    | assignment_val IS STRING_VAL SEMI 
    {$$ = new StringAssignment($1,new StringPrimitive($3));}
    ;

assignment_val:
    ID {$$ = new Variable(new SymName($1));}
    | str_id_lhs {$$ = $1;}
    | DEREF ID {$$ = new DerefVariable(new SymName($2));}
    ;
    

expr_list:
    expression multi_expr {$2->push_front($1); $$ = $2;}
    | {$$ = new std::list<Expr_ptr>();}
    ;

multi_expr:
    COMMA expression multi_expr {$3->push_front($2); $$ = $3;}
    | {$$ = new std::list<Expr_ptr>();}
    ;


primary_expression:
    PARENO expression PARENC {$$ = $2;}
    | ABS expression ABS {$$ = new AbsoluteValue($2);}
    | ID {$$ = new Ident(new SymName($1));}
    | str_id_expr {$$ = $1;}
    | INT_VAL {$$ = new IntLit(new Primitive($1));}
    | CHAR_VAL {$$ = new CharLit(new Primitive($1));}
    | BOOL_VAL {$$ = new BoolLit(new Primitive($1));}
    | KNULL     {$$ = new NullLit();}
    ;

unary_expression:
    primary_expression {$$ = $1;}
    | MINUS unary_expression {$$ = new Uminus($2);}
    | NOT unary_expression {$$ = new Not($2);}
    | ref_expression
    | DEREF primary_expression {$$ = new Deref($2);}
    ;

ref_expression:
    REF assignment_val {$$ = new AddressOf($2);}
    ;

multiplicative_expression:
    unary_expression {$$ = $1;}
    | multiplicative_expression TIMES unary_expression 
    {$$ = new Times($1,$3);}
    | multiplicative_expression DIV unary_expression 
    {$$ = new Div($1,$3);}
    ;

additive_expression:
    multiplicative_expression {$$ = $1;}
    | additive_expression PLUS multiplicative_expression 
    {$$ = new Plus($1,$3);}
    | additive_expression MINUS multiplicative_expression 
    {$$ = new Minus($1,$3);}
    ;

relational_expression:
    additive_expression {$$ = $1;}
    | relational_expression EQ additive_expression 
    {$$ = new Compare($1,$3);}
    | relational_expression LT additive_expression 
    {$$ = new Lt($1,$3);}
    | relational_expression GT additive_expression 
    {$$ = new Gt($1,$3);}
    | relational_expression LEQ additive_expression 
    {$$ = new Lteq($1,$3);}
    | relational_expression GEQ additive_expression 
    {$$ = new Gteq($1,$3);}
    | relational_expression NEQ additive_expression 
    {$$ = new Noteq($1,$3);}

and_expression:
    relational_expression {$$ = $1;}
    | and_expression AND relational_expression 
    {$$= new And($1,$3);}

expression:
    and_expression {$$ = $1;}
    | expression OR and_expression 
    {$$= new Or($1,$3);}

decl_list:
    variable_decleration decl_list {$2->push_front($1); $$=$2;}
    | {
        $$ = new std::list<Decl_ptr>();;
    }
    ;

stat_list:
    statement stat_list {$2->push_front($1); $$=$2;}
    | {
        $$ = new std::list<Stat_ptr>();
    }
    ;

code_block:
    decl_list stat_list
    {$$ = new Nested_blockImpl($1, $2);};

%%

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
